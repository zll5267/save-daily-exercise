Branching mode "killer feature"
1 Create Branch
  git branch <name>
2 Change the current Branch
  git checkout <branchName>
  git checkout <branchName> #create a branch and switch to the new branch.
  
  git merge <branchName> # merge the changes on  <branchName> to the current branch you are work on
  
  Fast forwar merge:the commit pointed to by the branch you merged in was directly upstream of the commit you're on.
  Three-way merge: Using the two snapshot pointed to by the branch tips and the common ancestor of the two.

  Merge conflict:
  git status # to see the unmerged file due to merge conflicts
  
  git mergetool
  the conflict is divided by ===,about it is the content from the branch you are on.the below content is from the merge-in branch.
Branch Management
  list the branchs in the repository
  git branch # no arguments
  git branch -v # to see the last commit on each branch
  
  git branch --merged
  git branch --no-merged# to see the branchs which contain work that isn't merged in.
  
Branch Workflow 
  master: stable,only code that has been or will be released.
  develop: not stable, still under development.
  topic: a short-lived branchs, use to fix bugs
  
  work silo
Remote Branch
  Remote branches are references to the state of branches on your remote repositories.
  They're local branches that you can't move;they're moved automatically whenever you do
  any network communication.
  Remote branches act as bookmarks to remind where the branches on your remote rempositories
  were the last time you connected to them.
  the FORM: (remote)/(branch)
  git remote add <remoteName> <URL>
  git fetch <remoteName> # looks up remote server <remoteName>,fetchs any data from it that you don't have yet.
                         # update the local database,move the <remoteName>/master to the new one.
Pushing 
  The local branches aren't automatically synchronized to the remote ,you have to explicitly push the branches you want to share.
  git push <remote> <branch>
  git push <remote> <localBranch>:<remoteBranch>
  
  git fetch orign # the fetch brings down new remote branches,you don't automatically have local,editable copies of them.
                  # you have an origin/<branch>
  git merge origin/serverfix
  git checkou -b <branch> origin/<branch>  
Tracking branches
  Checking out a local branch from a remote branch automatically creates what is called a tracking branch.
  Tracking branches are local branches that have a direct relationship to a remote branch.
  git clone URL: automatically create a master branch that tracks origin/master
  git checkout -b <branch> <remoteName>/<branch>
  ==> git checkout --track origin/serverfix
  
Deleting Remote Branches
  git push <remoteName> :<branch> # delete the <branch> on the <remoteName>
Rebasing
  git checkout experiment
  git rebase master
  #There is no difference in the end product of the integration,but rebasing makes for a cleaner hisgory.
  #the log of a rebased branch,it looks like a linear history:it appears that all the work happened in series,
  #even when it originally happened in parallel.
  #After use this, the master just do a fast-forward merge will be OK.
  
DO NOT REBASE COMMITS THAT YOU HAVE PUSHED TO A PUBLIC REPOSITORY.
