1 Getting Help
	git help <verb>
	git <verb> --help
	man git <verb>
  for example:
  	git help config
2 set and get configuration variables that control all aspects of how Git looks and operates.
git config --system :contains values for every user on the system and all their repository.(/etc/gitconfig|$home_git$/etc/gitconfig)
git config --global :specific to your user.($user_home$/.gitconfig)
git config          :specific to that single repository.($working_dir$/.git/config)

$home_git$          : where you install the git on the windows platform.
$user_home$         : on linux platform /home/$user$/,on windows platform C:\Documents and Settings\$user$.

for example:
	git config --global user.name "leliang.zhang"
	git config --global user.email leliang.zhang@gmail.com
	git config --global core.editor emacs
	git config --global merge.tool vimdiff
	git config --list =>git config -l
	git config user.name
	git config --global http.proxy http://IP:port
	git config --global alias.co checkout
	git config --global alias.br branch
	git config --global alias.visual "!gitk"# ! illustrate the following command is not a git subcommand
3 Getting a Repository
 A Initializing a Repository in an Existing Directory
  a. git init :create a .git dir which contains all of the necessary repository files-Git repository skeleton.
  b. git add *.c;git add README
  c. git commit m 'initial project version'
 B Cloning an Existing Repository
  git clone git://github.com/schacon/grit.git [mygrit](target directory name)
4 Checking the Status of Your Files
	git status
5 Tracking New Files
	git add <file>
	If <file> is a directory,then add all the files in it recursively.
  After you run 'git add' stage a file,you can use 'git reset HEAD <file>' to unstaged it.
6 Igoring Files
	create a file,named .gitignore contains the patterns to match the files you don't want Git to track.
	
	*~
	*.[oa] #ignore all the files end with .o or .a
	!lib.a #don't ignore the lib.a
	/TODO  #only ignore the root TODO,not the subdir TODO
	doc/*.txt #ignore doc/note.txt,but not doc/server/arch.txt
7 Viewing Your Staged and Unstaged Changes
  git diff # to see what you've changed but not yet staged.
  git diff --cached/--staged # compares your staged changes to your last commit.
8 Commit your Changes
  git commit #anything that is still unstaged won't go into this commit.
  git commit -v #add the diff of your change in the defaut editor.
  git commit -m ""
9 Skipping the Staging Area
  git commit -a -m "commit without add"# only applicable for the files already traced,not for the untraced.
10 Removing Files
  git rm <file> #remove the file from tracked,remove it from your staging area and then commit
  git rm --cached <file> # only remove the file from the staging area,but keep it in the working dir.
  git rm -f <file> #
  git rm log/\*.log
11 Moving Files
  git mv file_from file_to
  git mv README README.txt
  =>
  mv README README.txt
  git rm README
  git add README.txt
12 Viewing the Commit History
  git log
  git log -p -2# -p:shows the diff introduced in each commit;
               # -2:limits teh output to only the last two entries.
  git log --stat #print a list of modified files,and a summary of how many files changed and how many lines inserted and removed.
  git log --pretty#print a format output
  git log --pretty=oneline
  git log --pretty=format:"%h - %an,%ar :%s"
  Table : lists some of the more useful options that format takes
  Option            Description of Output
     %H                 Commit hash
     %h                 Abbreviated commit hash
     %T                 Tree hash
     %t                 Abbreviated tree hash
     %P                 Parent hashes
     %p                 Abbreviated parent hashes
     %an                Author name
     %ae                Author e-mail
     %ad                Author date (format respects the date= option)
     %ar                Author date, relative
     %cn                Committer name
     %ce                Committer email
     %cd                Committer date
     %cr                Committer date, relative
     %s                 Subject
     
     Table:
     Option             Description                                                                  
     -p                  Show the patch introduced with each commit.                                      
     --stat              Show statistics for files modified in each commit.                             
     --shortstat         Display only the changed/insertions/deletions line from the¨Cstat command.                                                                     
     --name-only         Show the list of files modified after the commit information.                                                                               
     --name-status       Show the list of files affected with added/modified/deleted information as well.                                                                
     --abbrev-commit     Show only the first few characters of the SHA-1 checksum instead of all 40.                                                                  
     --relative-date     Display the date in a relative format (for example, ¡°2 weeksago¡±) instead of using the full date format.                                       
     --graph Display an ASCII graph of the branch and merge history beside the log output.                                                              
     --pretty Show commits in an alternate format. Options include oneline, short, full, fuller, and format (where you specify your own format).
  git log -2 --pretty=oneline --graph
  git log -2 --shortstat
  
  Limit logs output
  Option                     Description
    --no-merge                not merged
    --all-match               all the filter condition should be meet.
    -(n)                      Show only the last n commits
    --since,  --after         Limit the commits to those made after the specified date.
    --until,  --before        Limit the commits to those made before the specified date.
    --author                  Only show commits in which the author entry matches the specified string.
    --committer               Only show commits in which the committer entry matches the specified string.
  git log --since="2 years 1 day 3 minutes ago"
  git  log  --pretty="%h:%s"  --author=gitster  --since="2008-10-01"  \
   --before="2008-11-01"  --no-merges  --  t/
  git log -2 --relative-date --since="2 hours ago" Readme.txt
  
  try the command gitk:a GUI to view the logs
13 Undoing Things
   a. Changing Your Last Commit
   git commit --amend
   for example:
   This command takes your staging area and uses it to override your last commit
   git commit -m "initial commit"
   git add forgotten_file
   git commit --amend --allow-empty
   git reset HEAD^ #use this can remove the most recently commit
   
   git help reset
   b.Unstaging a Staged File
   git reset HEAD XXXX.txt
   
   c.Unmodifying a Modified File
   !!dangerous command, dont' recommend to use
   git checkout -- <file> #a file have modified,but not staged,discard the changes.
   
   
2  Working with Remotes
21 Showing Your Remotes
   git remote -v 
   git remote add [shortname] [url]
   for example:
   git remote add google http://code.google.com/p/save-daily-exercise/
   git fetch google
   Then new branch is accessible locally as google/master,you can merge it into one of 
   your branches,or you can check out a local branch at that point if you want to inspect it.
22 Fetching and Pulling From Your Remotes
   git fetch [remote-name]# list by git remote -v
   #git fetch doesn't automatically merge the new thing from the remote with yours currently working on.
   git pull
   #If you have a branch setup to track a remote branch,the git pull command can automatically fetch and
   #merge a remote branch into your current branch.
23 Pushing to Your Remote
   git push [remote-name] [branch-name]
   git push origin master
   
24 Inspecting a Remote
   git remote show 

25 Removing and Renaming Remote
   git remote rename google google_repo
   git remote rm google_repo
26 Tagging
	 a.listing the avaiable tags in Git
	   git tag
	   git tag -l 'V1.4.*' # can use a particular pattern to see only the interested ones.
	   
	 b. Creating Tags
	    Two type tags:lightweight and annotated 
	    git tag -a V1.4 -m 'my version 1.4'# -a create a annotated tag
	    git tag -s V1.5 -m 'my signed 1.5 tag'#-s create a signed tags,with GPG( GNU Privacy Guard)'
	    git show V1.4 # show the tagger information
	    git tag V1.6-lw#don't supply the -a -s -m
	    git tag -v [tag-name] # use GPG to verify the signature.
	 c. Tagging Later
	    git log --pretty=oneline
	    git tag -a v1.2 9fceb02
	 d. Sharing a Tags
	    # By default,the git push command doesn't transfer tags to remote servrs.
	    git push origin [tagname]
	    git push origin --tags# transfer all of your tags to the remote server that are not already there.
	 e. Delete a tag
	    git tag -d <tagname>
	    