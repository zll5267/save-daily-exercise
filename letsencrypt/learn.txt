use letsencrypt-auto xxxx
the certificate locations: /etc/letsencrypt/archive|keyss  /etc/letsencrypt/live point to the latest version.

1. ./bootstrap/install-deps.sh
   ./bootstrap/dev/venv.sh

2. tox
   test cover: tox -e cover  |  ./tox.cover.sh $package

3. style
   tox -e lint   | pylint --rcfile=.pylintrc $path

4. Integration Test
   install Go 1.5 libtool-ltdl, mariadb-server, rabbitmq-server
   ./tests/boulder-start.sh or
   docker run --rm -it --net host -p 4000:4000 -e MYSQL_CONTAINER=yes --name boulder letsencrypt/boulder
   #run a docker boulder
   cd boulder/
   ./test/run-docker.sh


   # Add an /etc/hosts entry pointing le.wtf to 127.0.0.1
   ./tests/boulder-integration.sh && echo OK || echo FAIL

==========attach to the mysql container=================
docker -exec -it boulder-mysql /bin/sh
export TERM=linux
mysql [-P xxx] -u root -p
==========Rabbitmq==============
docker -exec -it boulder-rabbitmq /bin/sh
rabbitmqctl list_queues/bindings/..
rabbitmqadmin
rabbitmq-plugins enable rabbitmq_management #enable web management port:15672 guest:guest
=================================
how to user the docker to start boulder as the server to do the test
1. run boulder/test/run-docker.sh
   maybe encounter no exchange boulder error.
   should create the exchange on rabbitmq manually [name:boulder, type:topic]
   a. use a script, refer to ../rabbitmq/receive.py
   b. use web, rabbitmq-plugins enable rabbitmq_management,  port 15672
2. update the fake DNS server.
   boulder/test/dns-test-srv/main.go
   if no update, the DNS always return 127.0.0.1 for the client.
   a. update the test/dns-test-srv/main.go script.
   b. add a env variabe when start boulder in boulder/test/run-docker.sh
        -e FAKE_DNS=your.client.ip
3. when do the identifier validation, the tls SNI validation will fail,
   because the bould will try tlsport 5001(set in test/boulder-config.json,
   the client maybe use 443, so one way is to update 5001->443 in the config
   file: boulder/test/boulder-config.json.
4. before start the client, update the server address in the file:
   letsencrypt/constants.py   server="http://127.0.0.1:4000/directory"
5. if connect mysql failed. maybe update the table mysql/user
   update user set host = '%';
===============================================================
1. install the virtualenv and create one for client dev.
2. source venv/bin/active
3. venv/bin/letsencrypt
   load_entry_point(dist, group, name)
   dist: for d in pkg_resources.working_set: print(d) => find letsencrypt
	d=pkg_resources.working_set.find(pkg_resources.Requirement.parse("letsencrypt==0.1.0.dev0"))
        d.location/setup.py  => entry_points => letsencrypt.cli:main
4. 
   




